Command = function(p, msg, opts, noYield)
	local Admin = Admin
	local Functions = Functions
	local Process = Process
	local Remote = Remote
	local Logs = Logs
	local opts = opts or {}
	
	if #msg > Process.MsgStringLimit and type(p) == "userdata" and p:IsA("Player") and not Admin.CheckAdmin(p) then
		msg = string.sub(msg, 1, Process.MsgStringLimit);
	end

	msg = Functions.Trim(msg)

	if msg:match(Settings.BatchKey) then
		for cmd in msg:gmatch('[^'..Settings.BatchKey..']+') do
			local cmd = Functions.Trim(cmd)
			local waiter = Settings.PlayerPrefix.."wait"
			if cmd:lower():sub(1,#waiter) == waiter then
				local num = cmd:sub(#waiter+1)
				if num and tonumber(num) then
					wait(tonumber(num))
				end
			else
				Process.Command(p, cmd, opts, false)
			end
		end
	else
		local pData = opts.PlayerData or (p and Core.GetPlayer(p));
		local msg = (pData and Admin.AliasFormat(pData.Aliases, msg)) or msg;
		if msg:match(Settings.BatchKey) then
			Process.Command(p, msg, opts, false)
		else
			local index,command,matched = Admin.GetCommand(msg)

			if not command then
				if opts.Check then
					Remote.MakeGui(p,'Output',{Title = 'Output'; Message = msg..' is not a valid command.'})
				end
			else
				local allowed = false
				local isSystem = false
				local pDat = {
					Player = opts.Player or p;
					Level = opts.AdminLevel or Admin.GetLevel(p);
					isAgent = opts.IsAgent or HTTP.Trello.CheckAgent(p);
					isDonor = opts.IsDonor or (Admin.CheckDonor(p) and (Settings.DonorCommands or command.AllowDonors));
				}
				
				if opts.isSystem or p == "SYSTEM" then
					isSystem = true
					allowed = true
					p = p or "SYSTEM"
				else
					allowed = Admin.CheckPermission(pDat, command)
				end

				if opts.CrossServer and command.CrossServerDenied then
					allowed = false;
				end

				if allowed and opts.Chat and command.Chattable==false then
					Remote.MakeGui(p,'Output',{Title = ''; Message = 'You are not permitted this in chat: '..msg; Color = Color3.new(1,0,0)})
					return
				end

				if allowed then
					if not command.Disabled then
						do
							local ind = tostring(p.UserId)
							local usc = Variables.UserCooldowns[ind]
							if usc then
								local lastTime = usc[command]
								local time = tick()
								local cd = command.UserCooldown
								if lastTime and type(lastTime) == "number" and cd and type(cd) == "number" then
									local dif = time-lastTime
									if dif < command.UserCooldown then
										Functions.Hint("The command "..command.Prefix..command.Commands[1].." has a user cooldown. Try again in "..(math.floor(cd-dif)).." seconds.", {p})
										return
									end
								end
								usc[command] = time
							end
						end
						local cmdArgs = command.Args or command.Arguments
						local argString = msg:match("^.-"..Settings.SplitKey..'(.+)') or ''
						local args = (opts.Args or opts.Arguments) or (#cmdArgs > 0 and Functions.Split(argString, Settings.SplitKey, #cmdArgs)) or {}
						local taskName = "Command:: "..tostring(p)..": ("..msg..")"
						local commandID = "COMMAND_".. math.random()
						local running = true

						if #args > 0 and not isSystem and command.Filter or opts.Filter then
							local safe = {
								plr = true;
								plrs = true;
								username = true;
								usernames = true;
								players = true;
								player = true;
								users = true;
								user = true;
								brickcolor = true;
							}

							for i,arg in next,args do
								if not (cmdArgs[i] and safe[cmdArgs[i]:lower()]) then
									args[i] = service.LaxFilter(arg, p)
								end
							end
						end

						if opts.CrossServer or (not isSystem and not opts.DontLog and not command.DontLog) then
							AddLog("Commands",{
								Text = ((opts.CrossServer and "[CRS_SERVER] ") or "").. p.Name,
								Desc = matched.. Settings.SplitKey.. table.concat(args, Settings.SplitKey),
								Player = p;
							})

							if Settings.ConfirmCommands then
								Functions.Hint('Executed Command: [ '..msg..' ]',{p})
							end
						end

						if noYield then
							taskName = "Thread: "..taskName
						end

						local ran, error = service.TrackTask(taskName, command.Function, p, args, {PlayerData = pDat, Options = opts})
						if not opts.IgnoreErrors then
							if error and type(error) == "string" then
								error =  (error and tostring(error):match(":(.+)$")) or error or "Unknown error"
								if not isSystem then
											Remote.MakeGui(p,'Output',{Title = ''; Message = error; Color = Color3.new(1,0,0)})
								end
							elseif error and type(error) ~= "string" then
								if not isSystem then
									Remote.MakeGui(p,'Output',{Title = ''; Message = "There was an error but the error was not a string? "..tostring(error); Color = Color3.new(1,0,0)})
								end
							end
						end

						service.Events.CommandRan:Fire(p,{
							Message = msg;
							Matched = matched;
							Args = args;
							Command = command;
							Index = index;
							Success = ran;
							Error = error;
							Options = opts;
							PlayerData = pDat;
						})
					else
						if not isSystem and not opts.NoOutput then
							Remote.MakeGui(p,'Output',{Title = ''; Message = 'This command has been disabled.'; Color = Color3.new(1,0,0)})
						end
					end
				else
					if not isSystem and not opts.NoOutput then
						Remote.MakeGui(p,'Output',{Title = ''; Message = 'You are not allowed to run '..msg; Color = Color3.new(1,0,0)})
					end
				end
			end
		end
	end
end
